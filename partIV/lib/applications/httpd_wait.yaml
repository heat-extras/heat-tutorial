heat_template_version: 2015-10-15

description: >
  This template is used to deploy a generic webserver for a RHEL based image
  which also uses OS::Heat::WaitConditionHandle to signal its successful deployment 

parameters:

  image:
    label: Server Image
    description: >
      This parameter should be an image defined in glance.
    type: string
    default: Centos 7
    constraints:
      - custom_constraint: glance.image

  flavor:
    label: Instance Flavor
    description: Paramter that defines what type of flavor this instance will launch as
    type: string
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor

  ssh_key:
    label: SSH Key to be injected into instance
    description: Parameter that defines which keypair should be injected into the instance
    type: string
    default: heat_key
    constraints:
      - custom_constraint: nova.keypair

  security_group_icmp:
    label: Security Group Name (ICMP)
    type: string 
    default: setup_sg_icmp

  security_group_web:
    label: Security Group Name (WEB)
    type: string 
    default: setup_sg_web

  network_name:
    label: Network Name
    type: string
    default: setup_net
    constraints:
      - custom_constraint: neutron.network

  msg:
    label: Message to initialize webserver
    type: string
    default: "What's up!"

  name:
    label: Instance Name
    type: string

resources:

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  http_signal:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            wc_notify: { get_attr: [wait_handle, curl_cli] }
          template: |
            #!/bin/bash
            wc_notify --data-binary '{"status": "SUCCESS"}' --insecure

  http:
    type: ../softwareconfigs/httpd.yaml
    properties:
      msg: { get_param: msg }

  http_config:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: { get_attr: [http, config] }
          type: multipart
        - config: { get_resource: http_signal }

  instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      image: { get_param: image }
      security_groups: 
        - { get_param: security_group_icmp }
        - { get_param: security_group_web }
      key_name: { get_param: ssh_key }
      flavor: { get_param: flavor }
      networks: 
        - network: { get_param: network_name }
      user_data_format: RAW
      user_data: { get_resource: http_config } 

outputs:
  ipaddr:
    value: { get_attr: [ instance, first_address ] }
  port:
    value: { get_attr: [instance, addresses, { get_param: network_name} ,0 , port] }
