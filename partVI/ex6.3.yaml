heat_template_version: 2015-10-15

description: >
  This template uses the previously introduced str_replace intrinsic function to provide the script 
  definied in user_data with inputs that the user will provide as parameters when the stack is created.

parameters:

  image:
    label: Server Image
    description: >
      This parameter should be an image defined in glance.
    type: string
    default: Centos 7
    constraints:
      - custom_constraint: glance.image

  flavor:
    label: Instance Flavor
    description: Paramter that defines what type of flavor this instance will launch as
    type: string
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor

  ssh_key:
    label: SSH Key to be injected into instance
    description: Parameter that defines which keypair should be injected into the instance
    type: string
    default: heat_key
    constraints:
      - custom_constraint: nova.keypair

  security_group_icmp:
    label: Security Group Name (ICMP)
    type: string 
    default: setup_sg_icmp

  security_group_web:
    label: Security Group Name (WEB)
    type: string 
    default: setup_sg_web

  network_name:
    label: Network Name
    type: string
    default: setup_net
    constraints:
      - custom_constraint: neutron.network

  subnet:
    label: Subnet Name
    type: string 
    default: setup_subnet
    constraints:
      - custom_constraint: neutron.subnet

  public_network_id: 
    label: Public Network ID
    type: string

  message: 
    label: Contents for index.html of http instance
    type: string

  cluster_size:
    type: number
    label: Cluster size
    description: Number of instances in cluster.

resources:

  http_floating_ip:
    type: Tutorial::FloatingIP
    properties:
      public_network_id: { get_param: public_network_id } 
      port: { get_attr: [loadbalancer, vip_port_id] } 

  loadbalancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
       vip_subnet: { get_param: subnet }
  
  listener_http:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: loadbalancer}
      name: http_listener
      protocol: TCP
      protocol_port: 80

  listener_https:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer : { get_resource: loadbalancer}
      name: https_listener
      protocol: TCP
      protocol_port: 443

  pool_http:
    type: OS::Neutron::LBaaS::Pool
    properties:
      name: http_pool
      protocol: TCP
      lb_algorithm: ROUND_ROBIN
      listener: { get_resource: listener_http}

  monitor_http:
    type: OS::Neutron::LBaaS::HealthMonitor
    properties:
      type: TCP
      pool: { get_resource: pool_http }
      delay: 5
      max_retries: 3
      timeout: 2

  pool_https:
    type: OS::Neutron::LBaaS::Pool
    properties:
      name: https_pool
      protocol: TCP
      lb_algorithm: ROUND_ROBIN
      listener: { get_resource: listener_https}

  monitor_https:
    type: OS::Neutron::LBaaS::HealthMonitor
    properties:
      type: TCP
      pool: { get_resource: pool_https }
      delay: 5
      max_retries: 3
      timeout: 2


  cluster:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: cluster_size }
      resource_def:
        type: Tutorial::Application::HTTP_LB
        properties:
          name: ex6.3_%index%
          image: { get_param: image }
          security_group_icmp: { get_param: security_group_icmp }
          security_group_web: { get_param: security_group_web }
          ssh_key: { get_param: ssh_key }
          flavor: { get_param: flavor }
          network_name: { get_param: network_name }
          message: { get_param: message }
          pool_id_http: { get_resource: pool_http }
          pool_id_https: { get_resource: pool_https }
          subnet: { get_param: subnet }

outputs:
  http_ipaddr:
    value: { get_attr: [ http_floating_ip, floating_ip_address ] }
